// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeleteControllerHandlerFunc turns a function with the right signature into a delete controller handler
type DeleteControllerHandlerFunc func(DeleteControllerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteControllerHandlerFunc) Handle(params DeleteControllerParams) middleware.Responder {
	return fn(params)
}

// DeleteControllerHandler interface for that can handle valid delete controller params
type DeleteControllerHandler interface {
	Handle(DeleteControllerParams) middleware.Responder
}

// NewDeleteController creates a new http.Handler for the delete controller operation
func NewDeleteController(ctx *middleware.Context, handler DeleteControllerHandler) *DeleteController {
	return &DeleteController{Context: ctx, Handler: handler}
}

/* DeleteController swagger:route DELETE /controller deleteController

Delete controller

Delete controller with all it's indications

*/
type DeleteController struct {
	Context *middleware.Context
	Handler DeleteControllerHandler
}

func (o *DeleteController) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteControllerParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DeleteControllerBadRequestBody delete controller bad request body
//
// swagger:model DeleteControllerBadRequestBody
type DeleteControllerBadRequestBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this delete controller bad request body
func (o *DeleteControllerBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete controller bad request body based on context it is used
func (o *DeleteControllerBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteControllerBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteControllerBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteControllerBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteControllerBody delete controller body
//
// swagger:model DeleteControllerBody
type DeleteControllerBody struct {

	// serial
	Serial string `json:"serial,omitempty"`
}

// Validate validates this delete controller body
func (o *DeleteControllerBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete controller body based on context it is used
func (o *DeleteControllerBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteControllerBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteControllerBody) UnmarshalBinary(b []byte) error {
	var res DeleteControllerBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteControllerOKBody delete controller o k body
//
// swagger:model DeleteControllerOKBody
type DeleteControllerOKBody struct {

	// success
	Success bool `json:"success,omitempty"`
}

// Validate validates this delete controller o k body
func (o *DeleteControllerOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete controller o k body based on context it is used
func (o *DeleteControllerOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteControllerOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteControllerOKBody) UnmarshalBinary(b []byte) error {
	var res DeleteControllerOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
