// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetControllersHandlerFunc turns a function with the right signature into a get controllers handler
type GetControllersHandlerFunc func(GetControllersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetControllersHandlerFunc) Handle(params GetControllersParams) middleware.Responder {
	return fn(params)
}

// GetControllersHandler interface for that can handle valid get controllers params
type GetControllersHandler interface {
	Handle(GetControllersParams) middleware.Responder
}

// NewGetControllers creates a new http.Handler for the get controllers operation
func NewGetControllers(ctx *middleware.Context, handler GetControllersHandler) *GetControllers {
	return &GetControllers{Context: ctx, Handler: handler}
}

/* GetControllers swagger:route GET /controllers getControllers

List of controllers

Get list of controllers

*/
type GetControllers struct {
	Context *middleware.Context
	Handler GetControllersHandler
}

func (o *GetControllers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetControllersParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetControllersOKBody get controllers o k body
//
// swagger:model GetControllersOKBody
type GetControllersOKBody struct {

	// controllers
	Controllers []*GetControllersOKBodyControllersItems0 `json:"controllers"`
}

// Validate validates this get controllers o k body
func (o *GetControllersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateControllers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetControllersOKBody) validateControllers(formats strfmt.Registry) error {
	if swag.IsZero(o.Controllers) { // not required
		return nil
	}

	for i := 0; i < len(o.Controllers); i++ {
		if swag.IsZero(o.Controllers[i]) { // not required
			continue
		}

		if o.Controllers[i] != nil {
			if err := o.Controllers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getControllersOK" + "." + "controllers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getControllersOK" + "." + "controllers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get controllers o k body based on the context it is used
func (o *GetControllersOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateControllers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetControllersOKBody) contextValidateControllers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Controllers); i++ {

		if o.Controllers[i] != nil {
			if err := o.Controllers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getControllersOK" + "." + "controllers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getControllersOK" + "." + "controllers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetControllersOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetControllersOKBody) UnmarshalBinary(b []byte) error {
	var res GetControllersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetControllersOKBodyControllersItems0 get controllers o k body controllers items0
//
// swagger:model GetControllersOKBodyControllersItems0
type GetControllersOKBodyControllersItems0 struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// serial
	Serial string `json:"serial,omitempty"`
}

// Validate validates this get controllers o k body controllers items0
func (o *GetControllersOKBodyControllersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetControllersOKBodyControllersItems0) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get controllers o k body controllers items0 based on context it is used
func (o *GetControllersOKBodyControllersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetControllersOKBodyControllersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetControllersOKBodyControllersItems0) UnmarshalBinary(b []byte) error {
	var res GetControllersOKBodyControllersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
