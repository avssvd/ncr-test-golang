// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetControllerIndicationsOKCode is the HTTP code returned for type GetControllerIndicationsOK
const GetControllerIndicationsOKCode int = 200

/*GetControllerIndicationsOK Controller's indications

swagger:response getControllerIndicationsOK
*/
type GetControllerIndicationsOK struct {

	/*
	  In: Body
	*/
	Payload *GetControllerIndicationsOKBody `json:"body,omitempty"`
}

// NewGetControllerIndicationsOK creates GetControllerIndicationsOK with default headers values
func NewGetControllerIndicationsOK() *GetControllerIndicationsOK {

	return &GetControllerIndicationsOK{}
}

// WithPayload adds the payload to the get controller indications o k response
func (o *GetControllerIndicationsOK) WithPayload(payload *GetControllerIndicationsOKBody) *GetControllerIndicationsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get controller indications o k response
func (o *GetControllerIndicationsOK) SetPayload(payload *GetControllerIndicationsOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetControllerIndicationsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetControllerIndicationsBadRequestCode is the HTTP code returned for type GetControllerIndicationsBadRequest
const GetControllerIndicationsBadRequestCode int = 400

/*GetControllerIndicationsBadRequest Controller is already exist

swagger:response getControllerIndicationsBadRequest
*/
type GetControllerIndicationsBadRequest struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewGetControllerIndicationsBadRequest creates GetControllerIndicationsBadRequest with default headers values
func NewGetControllerIndicationsBadRequest() *GetControllerIndicationsBadRequest {

	return &GetControllerIndicationsBadRequest{}
}

// WithPayload adds the payload to the get controller indications bad request response
func (o *GetControllerIndicationsBadRequest) WithPayload(payload interface{}) *GetControllerIndicationsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get controller indications bad request response
func (o *GetControllerIndicationsBadRequest) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetControllerIndicationsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetControllerIndicationsInternalServerErrorCode is the HTTP code returned for type GetControllerIndicationsInternalServerError
const GetControllerIndicationsInternalServerErrorCode int = 500

/*GetControllerIndicationsInternalServerError Internal server Error

swagger:response getControllerIndicationsInternalServerError
*/
type GetControllerIndicationsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewGetControllerIndicationsInternalServerError creates GetControllerIndicationsInternalServerError with default headers values
func NewGetControllerIndicationsInternalServerError() *GetControllerIndicationsInternalServerError {

	return &GetControllerIndicationsInternalServerError{}
}

// WithPayload adds the payload to the get controller indications internal server error response
func (o *GetControllerIndicationsInternalServerError) WithPayload(payload interface{}) *GetControllerIndicationsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get controller indications internal server error response
func (o *GetControllerIndicationsInternalServerError) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetControllerIndicationsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
