// Code generated by sqlc. DO NOT EDIT.
// source: indications.sql

package db

import (
	"context"
	"time"
)

const createIndication = `-- name: CreateIndication :one
INSERT INTO indications (
    indication, controller_serial, sent_at
) VALUES (
             $1, $2, $3
         )
RETURNING id, indication, controller_serial, sent_at, created_at
`

type CreateIndicationParams struct {
	Indication       string    `json:"indication"`
	ControllerSerial int32     `json:"controllerSerial"`
	SentAt           time.Time `json:"sentAt"`
}

func (q *Queries) CreateIndication(ctx context.Context, arg CreateIndicationParams) (Indication, error) {
	row := q.db.QueryRowContext(ctx, createIndication, arg.Indication, arg.ControllerSerial, arg.SentAt)
	var i Indication
	err := row.Scan(
		&i.ID,
		&i.Indication,
		&i.ControllerSerial,
		&i.SentAt,
		&i.CreatedAt,
	)
	return i, err
}

const listIndications = `-- name: ListIndications :many
SELECT id, indication, controller_serial, sent_at, created_at FROM indications
ORDER BY sent_at
`

func (q *Queries) ListIndications(ctx context.Context) ([]Indication, error) {
	rows, err := q.db.QueryContext(ctx, listIndications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Indication
	for rows.Next() {
		var i Indication
		if err := rows.Scan(
			&i.ID,
			&i.Indication,
			&i.ControllerSerial,
			&i.SentAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listIndicationsByController = `-- name: ListIndicationsByController :many
SELECT id, indication, controller_serial, sent_at, created_at FROM indications
WHERE controller_serial = $1
ORDER BY sent_at
`

func (q *Queries) ListIndicationsByController(ctx context.Context, controllerSerial int32) ([]Indication, error) {
	rows, err := q.db.QueryContext(ctx, listIndicationsByController, controllerSerial)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Indication
	for rows.Next() {
		var i Indication
		if err := rows.Scan(
			&i.ID,
			&i.Indication,
			&i.ControllerSerial,
			&i.SentAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
