// Code generated by sqlc. DO NOT EDIT.
// source: controllers.sql

package db

import (
	"context"
)

const createController = `-- name: CreateController :one
INSERT INTO controllers (
    serial
) VALUES (
             $1
         )
RETURNING serial, created_at
`

func (q *Queries) CreateController(ctx context.Context, serial int32) (Controller, error) {
	row := q.db.QueryRowContext(ctx, createController, serial)
	var i Controller
	err := row.Scan(&i.Serial, &i.CreatedAt)
	return i, err
}

const deleteController = `-- name: DeleteController :exec
DELETE FROM controllers
WHERE serial = $1
`

func (q *Queries) DeleteController(ctx context.Context, serial int32) error {
	_, err := q.db.ExecContext(ctx, deleteController, serial)
	return err
}

const getController = `-- name: GetController :one
SELECT serial, created_at FROM controllers
WHERE serial = $1
`

func (q *Queries) GetController(ctx context.Context, serial int32) (Controller, error) {
	row := q.db.QueryRowContext(ctx, getController, serial)
	var i Controller
	err := row.Scan(&i.Serial, &i.CreatedAt)
	return i, err
}

const listControllers = `-- name: ListControllers :many
SELECT serial, created_at FROM controllers
ORDER BY serial
`

func (q *Queries) ListControllers(ctx context.Context) ([]Controller, error) {
	rows, err := q.db.QueryContext(ctx, listControllers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Controller
	for rows.Next() {
		var i Controller
		if err := rows.Scan(&i.Serial, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
